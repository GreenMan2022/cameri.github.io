<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>–ö–∞–º–µ—Ä—ã –ü–µ—Ä–≤–æ—É—Ä–∞–ª—å—Å–∫–∞</title>
  <script src="https://telegram.org/js/telegram-web-app.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body { font-family: sans-serif; background: #000; color: white; height: 100vh; overflow: hidden; }
    #feed { height: 100vh; overflow-y: auto; scroll-snap-type: y mandatory; }
    .camera-item { height: 100vh; display: flex; flex-direction: column; align-items: center; justify-content: center; padding: 20px; scroll-snap-align: center; }
    .video-container { width: 100%; height: 70vh; background: #000; position: relative; display: flex; align-items: center; justify-content: center; border-radius: 8px; }
    video { max-width: 100%; max-height: 100%; object-fit: contain; }
    .play-overlay { position: absolute; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0,0,0,0.6); display: flex; flex-direction: column; align-items: center; justify-content: center; z-index: 10; }
    .play-overlay.hidden { opacity: 0; pointer-events: none; }
    .play-btn { background: #3a86ff; color: white; border: none; padding: 12px 24px; font-size: 16px; border-radius: 8px; cursor: pointer; }
    .status { font-size: 14px; color: #ccc; margin-top: 8px; }
    .info h3 { margin: 0 0 5px 0; font-size: 18px; }
    .report-fab { position: fixed; bottom: 20px; right: 20px; width: 60px; height: 60px; background: #3a86ff; color: white; border: none; border-radius: 50%; font-size: 24px; cursor: pointer; z-index: 100; display: flex; align-items: center; justify-content: center; }
    .modal-overlay { position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0,0,0,0.7); z-index: 1000; display: flex; align-items: flex-end; }
    .modal { width: 100%; background: white; border-radius: 16px 16px 0 0; padding: 20px; box-shadow: 0 -2px 10px rgba(0,0,0,0.1); transform: translateY(100%); transition: transform 0.3s ease; }
    .modal.active { transform: translateY(0); }
    label, select { display: block; margin-bottom: 5px; font-weight: 500; color: #333; }
    select { width: 100%; padding: 12px; border: 1px solid #ddd; border-radius: 8px; font-size: 16px; }
    .submit-btn { background: #3a86ff; color: white; border: none; padding: 14px; font-size: 16px; border-radius: 8px; width: 100%; margin-top: 10px; }
    .confirm-modal { position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; padding: 30px 20px; border-radius: 12px; box-shadow: 0 4px 20px rgba(0,0,0,0.2); z-index: 1002; text-align: center; width: 80%; max-width: 300px; }
    .confirm-modal p { margin: 0 0 20px 0; font-size: 16px; color: #333; font-weight: 500; }
    .confirm-buttons { display: flex; gap: 10px; justify-content: center; margin-top: 10px; }
    .btn-yes, .btn-no { padding: 8px 16px; border: none; border-radius: 6px; cursor: pointer; font-size: 15px; }
    .btn-yes { background: #3a86ff; color: white; }
    .btn-no { background: #ccc; color: #333; }
    .error { color: red; font-size: 14px; margin-top: 10px; text-align: center; }
  </style>
</head>
<body>
  <div id="feed"></div>
  <button class="report-fab" id="reportBtn">üìù</button>

  <div class="modal-overlay" id="overlay">
    <div class="modal" id="reportModal">
      <h3>–°–æ–æ–±—â–∏—Ç—å –æ —Å–æ–±—ã—Ç–∏–∏</h3>
      <div class="form-group">
        <label for="eventType">–¢–∏–ø —Å–æ–±—ã—Ç–∏—è</label>
        <select id="eventType">
          <option value="dtp">–î–¢–ü</option>
          <option value="dps">–î–ü–°</option>
          <option value="proish">–ü—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏–µ</option>
          <option value="inter">–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ</option>
        </select>
      </div>
      <div class="form-group">
        <label>–ö–∞–º–µ—Ä–∞</label>
        <select id="cameraSelect" disabled><option>–ó–∞–≥—Ä—É–∑–∫–∞...</option></select>
      </div>
      <button class="submit-btn" id="submitBtn">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
      <div id="modalError" class="error" style="display: none;"></div>
    </div>
  </div>

  <div class="confirm-modal" id="confirmModal" style="display: none;">
    <p>–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–¥—Ä–æ–º?</p>
    <div class="confirm-buttons">
      <button class="btn-yes" id="confirmYes">–î–∞</button>
      <button class="btn-no" id="confirmNo">–ù–µ—Ç</button>
    </div>
  </div>

  <canvas id="screenshotCanvas" style="display: none;"></canvas>

  <script>
    // –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö
    const CAMERAS_FILE = 'cameras.json';
    const BLACKLIST_FILE = 'blacklist.json';

    // –î–∞–Ω–Ω—ã–µ
    const CAMERAS = [];
    const BLACKLIST = [];
    let ACTIVE_INDEX = null;
    let user = null;

    // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
    const feed = document.getElementById('feed');
    const reportBtn = document.getElementById('reportBtn');
    const overlay = document.getElementById('overlay');
    const reportModal = document.getElementById('reportModal');
    const cameraSelect = document.getElementById('cameraSelect');
    const eventType = document.getElementById('eventType');
    const submitBtn = document.getElementById('submitBtn');
    const modalError = document.getElementById('modalError');
    const confirmModal = document.getElementById('confirmModal');
    const confirmYes = document.getElementById('confirmYes');
    const confirmNo = document.getElementById('confirmNo');
    const canvas = document.getElementById('screenshotCanvas');
    const ctx = canvas.getContext('2d');
    const tg = Telegram.WebApp;
    tg.expand();

    // === –ü—Ä–æ–≤–µ—Ä–∫–∞: –æ—Ç–∫—Ä—ã—Ç –ª–∏ WebApp —á–µ—Ä–µ–∑ Telegram? ===
    function isLaunchedInTelegram() {
      return tg && tg.initData && tg.initData !== '';
    }

    // === –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–º–µ—Ä ===
    async function loadCameras() {
      try {
        const response = await fetch(CAMERAS_FILE);
        const data = await response.json();
        CAMERAS.length = 0;
        data.forEach(cam => CAMERAS.push(cam));
        createFeed();
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–º–µ—Ä:', err);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–º–µ—Ä—ã');
      }
    }

    // === –ó–∞–≥—Ä—É–∑–∫–∞ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ ===
    async function loadBlacklist() {
      try {
        const response = await fetch(BLACKLIST_FILE);
        const data = await response.json();
        BLACKLIST.length = 0;
        data.forEach(id => BLACKLIST.push(Number(id)));
        console.log('–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω:', BLACKLIST);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:', err);
        // –ú–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å ‚Äî —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
      }
    }

    // === –°–æ–∑–¥–∞–Ω–∏–µ –ª–µ–Ω—Ç—ã ===
    function createFeed() {
      feed.innerHTML = '';
      CAMERAS.forEach((cam, index) => {
        const item = document.createElement('div');
        item.className = 'camera-item';
        item.dataset.index = index;

        const container = document.createElement('div');
        container.className = 'video-container';
        container.dataset.index = index;

        const video = document.createElement('video');
        video.id = `camera-${index}`;
        video.setAttribute('playsinline', '');
        video.muted = true;

        const overlayEl = document.createElement('div');
        overlayEl.className = 'play-overlay';
        overlayEl.id = `overlay-${index}`;
        overlayEl.innerHTML = `
          <button class="play-btn" data-index="${index}">‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏</button>
          <div class="status">–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</div>
        `;

        container.appendChild(video);
        container.appendChild(overlayEl);
        item.appendChild(container);

        const info = document.createElement('div');
        info.className = 'info';
        info.innerHTML = `<h3>${cam.name}</h3>`;
        item.appendChild(info);

        feed.appendChild(item);
      });

      // –ö–Ω–æ–ø–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
      document.querySelectorAll('.play-btn').forEach(btn => {
        btn.addEventListener('click', function () {
          const index = parseInt(this.dataset.index);
          const video = document.getElementById(`camera-${index}`);
          const overlayEl = document.getElementById(`overlay-${index}`);
          const statusEl = overlayEl.querySelector('.status');

          if (ACTIVE_INDEX === index) {
            stopCamera(index);
            ACTIVE_INDEX = null;
            this.innerHTML = '‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏';
            statusEl.textContent = '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ';
            overlayEl.classList.remove('hidden');
          } else {
            if (ACTIVE_INDEX !== null) stopCamera(ACTIVE_INDEX);
            startCamera(index, video, overlayEl);
            ACTIVE_INDEX = index;
            this.innerHTML = '‚è∏Ô∏è –ü–∞—É–∑–∞';
            statusEl.textContent = '–¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è';
            overlayEl.classList.add('hidden');
          }
        });
      });
    }

    function startCamera(index, video, overlayEl) {
      const url = CAMERAS[index].url;

      if (Hls.isSupported()) {
        const hls = new Hls({
          debug: false,
          maxMaxBufferLength: 10,
          maxBufferLength: 10,
          liveSyncDuration: 3
        });

        hls.on(Hls.Events.ERROR, function (event, data) {
          console.error('HLS.js Error:', data);
          if (data.fatal) {
            switch (data.type) {
              case Hls.ErrorTypes.NETWORK_ERROR:
                alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç');
                break;
              case Hls.ErrorTypes.MEDIA_ERROR:
                hls.recoverMediaError();
                break;
              default:
                alert('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è');
                break;
            }
          }
        });

        hls.on(Hls.Events.MANIFEST_PARSED, function () {
          video.play().catch(err => console.error('Play error:', err));
        });

        hls.loadSource(url);
        hls.attachMedia(video);
      } else {
        video.src = url;
        video.addEventListener('loadedmetadata', () => {
          video.play().catch(err => console.error('Play error:', err));
        });
      }
    }

    function stopCamera(index) {
      const video = document.getElementById(`camera-${index}`);
      if (video) {
        video.pause();
        video.src = '';
      }
    }

    // === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
    function checkUser() {
      if (!isLaunchedInTelegram()) {
        alert('‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ Telegram');
        return false;
      }

      user = tg.initDataUnsafe?.user;
      if (!user || !user.id) {
        alert('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return false;
      }

      if (BLACKLIST.includes(user.id)) {
        alert('‚ùå –í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è');
        return false;
      }

      return true;
    }

    // === –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ ===
    reportBtn.addEventListener('click', () => {
      if (!checkUser()) return;

      cameraSelect.innerHTML = '';
      modalError.style.display = 'none';
      if (ACTIVE_INDEX !== null) {
        const cam = CAMERAS[ACTIVE_INDEX];
        const opt = document.createElement('option');
        opt.value = cam.id;
        opt.textContent = cam.name;
        cameraSelect.appendChild(opt);
      } else {
        const opt = document.createElement('option');
        opt.value = '';
        opt.textContent = '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞–º–µ—Ä—ã';
        cameraSelect.appendChild(opt);
      }
      overlay.style.display = 'flex';
      setTimeout(() => reportModal.classList.add('active'), 10);
    });

    overlay.addEventListener('click', (e) => {
      if (e.target === overlay) {
        reportModal.classList.remove('active');
        setTimeout(() => overlay.style.display = 'none', 300);
      }
    });

    submitBtn.addEventListener('click', () => {
      const type = eventType.value;
      const cameraId = cameraSelect.value;
      if (!type || !cameraId) {
        modalError.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –∏ –∫–∞–º–µ—Ä—É';
        modalError.style.display = 'block';
        return;
      }
      modalError.style.display = 'none';
      confirmModal.style.display = 'block';
    });

    // === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å –∫–∞–¥—Ä–æ–º (—á–µ—Ä–µ–∑ canvas) ===
    confirmYes.addEventListener('click', () => {
      const type = eventType.value;
      const cameraId = cameraSelect.value;
      const camera = CAMERAS.find(c => c.id == cameraId);
      const video = document.getElementById(`camera-${ACTIVE_INDEX}`);

      if (!video || video.readyState < 2) {
        alert('–í–∏–¥–µ–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
        return;
      }

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ canvas
      const maxWidth = 800;
      let width = video.videoWidth || 800;
      let height = video.videoHeight || 600;

      if (width > maxWidth) {
        height = Math.round(height * maxWidth / width);
        width = maxWidth;
      }

      canvas.width = width;
      canvas.height = height;
      ctx.drawImage(video, 0, 0, width, height);

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Blob
      canvas.toBlob(async (blob) => {
        const text = `
üö® <b>–°–æ–±—ã—Ç–∏–µ:</b> ${type}
üìπ <b>–ö–∞–º–µ—Ä–∞:</b> ${camera ? camera.name : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'}
üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${user?.first_name} ${user?.last_name}
üÜî <b>ID:</b> ${user?.id}
üïí <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}
        `.trim();

        // –°–æ–∑–¥–∞—ë–º FormData
        const formData = new FormData();
        formData.append('chat_id', '-1003033000994');
        formData.append('caption', text);
        formData.append('parse_mode', 'HTML');
        formData.append('photo', blob, 'screenshot.jpg');

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
        try {
          const response = await fetch('https://api.telegram.org/bot8191852280:AAFcOI5tVlJlk4xxnzxAgIUBmW4DW5KElro/sendPhoto', {
            method: 'POST',
            body: formData
          });

          const result = await response.json();
          if (result.ok) {
            alert('‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É!');
          } else {
            console.error('–û—à–∏–±–∫–∞ Telegram:', result);
            alert(`‚ùå –û—à–∏–±–∫–∞: ${result.description}`);
          }
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', err);
          alert('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
        }
      }, 'image/jpeg', 0.8);
    });

    confirmNo.addEventListener('click', () => {
      confirmModal.style.display = 'none';
    });

    // === –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ===
    window.addEventListener('load', async () => {
      await loadBlacklist();
      await loadCameras();
    });
  </script>
</body>
</html>
